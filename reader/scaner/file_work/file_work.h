/*
    Этот директив препроцессора проверяет, не определен ли макрос "FILE_WORK_H_INCLUDED".
    Если макрос не определен, код внутри условного блока будет обработан:
*/
#ifndef FILE_WORK_H_INCLUDED


/*
    Определяет макрос "FILE_WORK_H_INCLUDED".
    Это предотвращает многократное включение этого заголовочного файла в один и тот же файл.
    Благодаря этому директиву, следующий раз при включении "FILE_WORK_H_INCLUDED"
    компилятор пропустит содержимое между "#ifndef" и "#endif":
*/
#define FILE_WORK_H_INCLUDED

#define FILE_SIZE 512


/*
    Подключаем заголовочный файл, в котором содержатся общие определения и функции,
    используемые в других файлах:
*/
#include "../../../main_common.h"


/*
    Смысл этой функции в чтении файла,
    Принцып работы:
        1.) Открываем файл;
        2.) Определяем размер файла;
        3.) Выделяем память для содержимого файла;
        4.) Читаем содержимое файла
        (И сохраняем, чтобы позже передать в другое необходимое место);
*/
/// В функцию "str_read_file" передаём путь к файлу:
void str_get_file_path(char *);

/*
    Смысл функции получить путь к файлу используя необходимые данные.
    Принцип работы:
        1.) Вводим путь к файлу;
        2.) Читаем путь к файлу;
        3.) Удаляем символ новой строки;

    Функция str_get_file_path принимает два аргумента:
        1.) Указатель "file_path" для хранения пути к файлу;
        2.) Размер буфера файла по пути;
*/
char *str_read_file(const char *);


/*
    Закрывает условный блок препроцессора, начатый директивой "#ifndef".
    Если макрос "FILE_WORK_H_INCLUDED" не был определен до этого,
    код между "#ifndef" и "#endif" будет включен:
*/
#endif

/// Смысл этого заголовочного файла в использовании алгоритмических функций.
